<!DOCTYPE html>
<html lang="en">

<head>
	<%- include("../../partials/head"); %>
</head>

<body>

<header>
	<%- include("../../partials/header"); %>
</header>

<main class="container">
	<div class="text-center">
		<h1>Create Event</h1>
		<% if (locals.error) { %>
			<div class="alert alert-danger" role="alert">
				<%= error %>
			</div>
		<% } %>
	</div>

	<div class="row justify-content-center">
		<form method="POST" id="eventForm">
			<div class="form-group">
				<label for="name"></label>
				<input id="name" type="text" name="name" class="form-control form-control-lg" placeholder="Title" required>
			</div>
			<div class="form-group">
				<label for="description"></label>
				<textarea id="description" name="description" class="form-control" placeholder="Description" required></textarea>
			</div>
			<div class="form-group">
				<label for="url"></label>
				<input id="url" type="url" name="url" class="form-control" placeholder="https://www.example.com/" required>
			</div>
			<div class="form-group">
				<label for="start">Start Date</label>
				<input id="start" type="date" name="start" class="form-control" required>
			</div>
			<div class="form-group">
				<label for="end">End Date</label>
				<input id="end" type="date" name="end" class="form-control" required>
			</div>


			<div class="form-group">
				<label for="autocomplete">Address Autocomplete</label>
				<input
					id="autocomplete"
					class="form-control"
					placeholder="Enter your address"
					onFocus="geolocate()"
					type="text"
					required
				/>
				<input type="hidden" class="field" id="street_number" disabled>
				<input type="hidden" class="field" id="route" disabled>
			</div>
			<div class="form-group">
				<label for="address2">Address 2</label>
				<input type="text" class="form-control" id="address2" name="address2" placeholder="Apartment, studio, or floor">
			</div>
			<div class="form-group">
				<label for="address">Address Line</label>
				<input type="text" class=" form-control" id="address" name="address" disabled required>
			</div>
			<div class="form-row">
				<div class="form-group col-md-6">
					<label for="locality">City</label>
					<input type="text" class="form-control" id="locality" name="city" disabled required>
				</div>
				<div class="form-group col-md-4">
					<label for="administrative_area_level_1">State</label>
					<input type="text" class="form-control" id="administrative_area_level_1" name="state" disabled required>
				</div>
				<div class="form-group col-md-2">
					<label for="postal_code">Zip Code</label>
					<input type="text" class="form-control" id="postal_code" name="zipCode" disabled required>
				</div>
			</div>
			<button type="submit" class="btn btn-primary">Create Event</button>
		</form>
	</div>
</main>

<footer>
	<%- include('../../partials/footer'); %>
</footer>

<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script
	src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDwPVUe91YjHm5P9cwDV9vYOHQmnJVyR9c&callback=initAutocomplete&libraries=places&v=weekly"
	defer
></script>
<script>
	// This sample uses the Autocomplete widget to help the user select a
	// place, then it retrieves the address components associated with that
	// place, and then it populates the form fields with those details.
	// This sample requires the Places library. Include the libraries=places
	// parameter when you first load the API. For example:
	// <script
	// src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
	let placeSearch;
	let autocomplete;
	const componentForm = {
		street_number: "short_name",
		route: "long_name",
		locality: "long_name",
		administrative_area_level_1: "short_name",
		postal_code: "short_name",
	};
	document.getElementById("eventForm").reset();
	for (const component in componentForm) {
		document.getElementById(component).disabled = true;
	}
	document.getElementById("address").disabled = true;

	function initAutocomplete() {
		// Create the autocomplete object, restricting the search predictions to
		// geographical location types.
		autocomplete = new google.maps.places.Autocomplete(
			document.getElementById("autocomplete"),
			{
				types: ["address"],
				componentRestrictions: {country: "us"}
			}
		);

		// Avoid paying for data that you don't need by restricting the set of
		// place fields that are returned to just the address components.
		autocomplete.setFields(["address_component"]);

		// When the user selects an address from the drop-down, populate the
		// address fields in the form.
		autocomplete.addListener("place_changed", fillInAddress);
	}

	function fillInAddress() {
		// Get the place details from the autocomplete object.
		const place = autocomplete.getPlace();

		for (const component in componentForm) {
			document.getElementById(component).value = "";
			document.getElementById(component).disabled = false;
		}
		document.getElementById("autocomplete").required = false;
		document.getElementById("address").disabled = false;

		// Get each component of the address from the place details,
		// and then fill-in the corresponding field on the form.
		for (const component of place.address_components) {
			const addressType = component.types[0];

			if (componentForm[addressType]) {
				const val = component[componentForm[addressType]];
				document.getElementById(addressType).value = val;
			}
		}
		document.getElementById("address").value =
			place.address_components[0]["long_name"] + " " +
			place.address_components[1]["long_name"];
	}

	// Bias the autocomplete object to the user's geographical location,
	// as supplied by the browser's 'navigator.geolocation' object.
	function geolocate() {
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition((position) => {
				const geolocation = {
					lat: position.coords.latitude,
					lng: position.coords.longitude,
				};
				const circle = new google.maps.Circle({
					center: geolocation,
					radius: position.coords.accuracy,
				});
				autocomplete.setBounds(circle.getBounds());
			});
		}
	}
</script>

</body>

</html>
